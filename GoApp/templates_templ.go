// Code generated by templ@v0.2.334 DO NOT EDIT.

package main

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"
import "strings"

import "strconv"

func layout(title string, main templ.Component) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_1 := templ.GetChildren(ctx)
		if var_1 == nil {
			var_1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><base href=\"~/\"><link rel=\"stylesheet\" href=\"/css/bootstrap/bootstrap.min.css\"><link rel=\"stylesheet\" href=\"/css/open-iconic/font/css/open-iconic-bootstrap.min.css\"><link href=\"/css/BlazorApp.styles.css\" rel=\"stylesheet\"><title>")
		if err != nil {
			return err
		}
		var var_2 string = title
		_, err = templBuffer.WriteString(templ.EscapeString(var_2))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</title></head><body><div id=\"main-layout\">")
		if err != nil {
			return err
		}
		err = main.Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</div><script src=\"/htmx1.9.6.min.js\">")
		if err != nil {
			return err
		}
		var_3 := ``
		_, err = templBuffer.WriteString(var_3)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</script></body></html>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func boosted_layout(title string, main templ.Component) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_4 := templ.GetChildren(ctx)
		if var_4 == nil {
			var_4 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<title hx-swap-oob=\"title\">")
		if err != nil {
			return err
		}
		var var_5 string = title
		_, err = templBuffer.WriteString(templ.EscapeString(var_5))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</title>")
		if err != nil {
			return err
		}
		err = main.Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func main_layout(nav_menu, main_article templ.Component) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_6 := templ.GetChildren(ctx)
		if var_6 == nil {
			var_6 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<div class=\"page\"><div class=\"sidebar\">")
		if err != nil {
			return err
		}
		err = nav_menu.Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</div><main><div class=\"top-row px-4\"><a href=\"/about\" hx-boost=\"true\" hx-target=\"#main-layout\">")
		if err != nil {
			return err
		}
		var_7 := `About`
		_, err = templBuffer.WriteString(var_7)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</a></div><article class=\"content px-4 article\" id=\"main-article\">")
		if err != nil {
			return err
		}
		err = main_article.Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</article></main></div>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func nav_item(request_path string, text string, href string) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_8 := templ.GetChildren(ctx)
		if var_8 == nil {
			var_8 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<div class=\"nav-item px-3\">")
		if err != nil {
			return err
		}
		if href == request_path {
			_, err = templBuffer.WriteString("<a class=\"nav-link active\" href=\"")
			if err != nil {
				return err
			}
			var var_9 templ.SafeURL = templ.SafeURL(href)
			_, err = templBuffer.WriteString(templ.EscapeString(string(var_9)))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\"><span class=\"oi oi-home\" aria-hidden=\"true\"></span>")
			if err != nil {
				return err
			}
			var var_10 string = text
			_, err = templBuffer.WriteString(templ.EscapeString(var_10))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</a>")
			if err != nil {
				return err
			}
		} else {
			_, err = templBuffer.WriteString("<a class=\"nav-link\" href=\"")
			if err != nil {
				return err
			}
			var var_11 templ.SafeURL = templ.SafeURL(href)
			_, err = templBuffer.WriteString(templ.EscapeString(string(var_11)))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\"><span class=\"oi oi-home\" aria-hidden=\"true\"></span>")
			if err != nil {
				return err
			}
			var var_12 string = text
			_, err = templBuffer.WriteString(templ.EscapeString(var_12))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</a>")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString("</div>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func nav_menu(path string) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_13 := templ.GetChildren(ctx)
		if var_13 == nil {
			var_13 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<div class=\"navbar-top-row ps-3 navbar navbar-dark\"><div class=\"container-fluid\"><a class=\"navbar-brand\" href=\"\">")
		if err != nil {
			return err
		}
		var_14 := `BlazorApp`
		_, err = templBuffer.WriteString(var_14)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</a><label for=\"toggle-menu\"><div title=\"Navigation menu\" class=\"navbar-toggler\"><span class=\"navbar-toggler-icon\"></span></div></label></div></div><input type=\"checkbox\" id=\"toggle-menu\" class=\"visually-hidden\"><div id=\"nav-menu\"><nav class=\"flex-column\" hx-boost=\"true\" hx-target=\"#main-layout\">")
		if err != nil {
			return err
		}
		err = nav_item(path, "Home", "/").Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		err = nav_item(path, "Counter", "/counter").Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		err = nav_item(path, "Fetch data", "/fetchdata").Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</nav></div>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func index() templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_15 := templ.GetChildren(ctx)
		if var_15 == nil {
			var_15 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<h1>")
		if err != nil {
			return err
		}
		var_16 := `Hello, world!`
		_, err = templBuffer.WriteString(var_16)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</h1><p>")
		if err != nil {
			return err
		}
		var_17 := `Welcome to your new app.`
		_, err = templBuffer.WriteString(var_17)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</p>")
		if err != nil {
			return err
		}
		err = surveyPrompt("How is Blazor working for you?").Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func counter(count int) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_18 := templ.GetChildren(ctx)
		if var_18 == nil {
			var_18 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<form id=\"increment-form\" hx-get=\"/increment\" hx-swap=\"outerHTML\"><h1>")
		if err != nil {
			return err
		}
		var_19 := `Counter`
		_, err = templBuffer.WriteString(var_19)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</h1><p role=\"status\">")
		if err != nil {
			return err
		}
		var_20 := `Current count: `
		_, err = templBuffer.WriteString(var_20)
		if err != nil {
			return err
		}
		var var_21 string = strconv.Itoa(count)
		_, err = templBuffer.WriteString(templ.EscapeString(var_21))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</p><input type=\"hidden\" name=\"count\" value=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(strconv.Itoa(count + 1)))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\"><input type=\"submit\" class=\"btn btn-primary\" id=\"ClickMeButton\" value=\"Click me\"></form>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func bigLink() templ.CSSClass {
	var templCSSBuilder strings.Builder
	templCSSBuilder.WriteString(`display:block;`)
	templCSSBuilder.WriteString(`font-size:x-large;`)
	templCSSBuilder.WriteString(`text-decoration:none;`)
	templCSSBuilder.WriteString(`text-align:center;`)
	templCSSID := templ.CSSID(`bigLink`, templCSSBuilder.String())
	return templ.ComponentCSSClass{
		ID:    templCSSID,
		Class: templ.SafeCSS(`.` + templCSSID + `{` + templCSSBuilder.String() + `}`),
	}
}

func about() templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_22 := templ.GetChildren(ctx)
		if var_22 == nil {
			var_22 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<p>")
		if err != nil {
			return err
		}
		var_23 := `I'm built with`
		_, err = templBuffer.WriteString(var_23)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</p>")
		if err != nil {
			return err
		}
		var var_24 = []any{bigLink}
		err = templ.RenderCSSItems(ctx, templBuffer, var_24...)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("<a class=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(templ.CSSClasses(var_24).String()))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" href=\"https://gofiber.io/\">")
		if err != nil {
			return err
		}
		var_25 := `Go Fiber`
		_, err = templBuffer.WriteString(var_25)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</a>")
		if err != nil {
			return err
		}
		var var_26 = []any{bigLink}
		err = templ.RenderCSSItems(ctx, templBuffer, var_26...)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("<a class=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(templ.CSSClasses(var_26).String()))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" href=\"https://htmx.org/\">")
		if err != nil {
			return err
		}
		var_27 := `HTMX`
		_, err = templBuffer.WriteString(var_27)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</a>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func surveyPrompt(title string) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_28 := templ.GetChildren(ctx)
		if var_28 == nil {
			var_28 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<div class=\"alert alert-secondary mt-4\"><span class=\"oi oi-pencil me-2\" aria-hidden=\"true\"></span><strong>")
		if err != nil {
			return err
		}
		var var_29 string = title
		_, err = templBuffer.WriteString(templ.EscapeString(var_29))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</strong><span class=\"text-nowrap\">")
		if err != nil {
			return err
		}
		var_30 := `Please take our`
		_, err = templBuffer.WriteString(var_30)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(" <a target=\"_blank\" class=\"font-weight-bold link-dark\" href=\"https://go.microsoft.com/fwlink/?linkid=2149017\">")
		if err != nil {
			return err
		}
		var_31 := `brief survey`
		_, err = templBuffer.WriteString(var_31)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</a></span> ")
		if err != nil {
			return err
		}
		var_32 := `and tell us what you think.`
		_, err = templBuffer.WriteString(var_32)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</div>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func fetchData() templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_33 := templ.GetChildren(ctx)
		if var_33 == nil {
			var_33 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<h1>")
		if err != nil {
			return err
		}
		var_34 := `Weather forecast`
		_, err = templBuffer.WriteString(var_34)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</h1><p>")
		if err != nil {
			return err
		}
		var_35 := `This component demonstrates fetching data from a service.`
		_, err = templBuffer.WriteString(var_35)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</p><p hx-trigger=\"every 2s\" hx-post=\"/forecasts\" hx-swap=\"outerHTML\"><em>")
		if err != nil {
			return err
		}
		var_36 := `Loading...`
		_, err = templBuffer.WriteString(var_36)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</em></p>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}
